install.packages(c("rmarkdown", "devtools", "plyr", "dplyr", "caret", "randomForest", "zoo", "lubridate", "rjsonio", "jsonlite"))
install.packages(c("RODBC", "RMySQL", "RPostgreSQL", "RSQLite", "XLConnect", "xlsx", "tidyr", "stringr", "ggplot2", "ggvis", "htmlwidgets", "googleVis", "car", "mgcv", "shiny", "shinyDashboard", "xtable", "maps", "ggmap", "its", "quantmod", "data.table", "XML", "httr", "roxygen", "reshape2", "colorspace", "RColorBrewer", "scales", "Curl", "knit"))
install.packages("ctv")
install.packages(c("RWekajars", "RWeka"))
install.packages("rJava")
install.packages(c("RWekajars", "RWeka"))
install.packages(c("RWekajars", "RWeka"))
install.packages(c("RWekajars", "RWeka"))
shiny::runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
shiny::runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
shiny::runApp('Desktop/DSCapstone')
shiny::runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Downloads/capstone')
runApp('Desktop/DSCapstone')
runApp('Downloads/capstone')
runApp('Downloads/capstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/DSCapstone')
runApp('Desktop/NEW')
install.packages(c("nlme", "survival"))
install.packages("installR")
install.packages("installR")
install.packages("installr")
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/3.2/Resources/library/"))
package_list <- as.character(package_df$Package)
package_list
install.packages(package_list)
install.packages(c("acepack", "BH", "car", "caret", "chron", "colorspace", "ctv", "curl", "data.table", "DBI", "digest", "DT", "dygraphs", "evaluate", "ggplot2", "ggvis", "git2r", "googleVis", "Hmisc", "htmlTable", "htmlwidgets", "jsonlite", "knitr", "lubridate", "maps", "mgcv", "mime", "ngram", "openssl", "packrat", "proto", "quantmod", "quantreg", "R.oo", "R.utils", "R6", "Rcpp", "RcppEigen", "reshape2", "rgl", "RgoogleMaps", "rmarkdown", "rpart.plot", "rsconnect", "RSQLite", "rstan", "scales", "shiny", "shinydashboard", "shinyFiles", "shinyjs", "shinystan", "shinythemes", "slam", "sp", "SparseM", "StanHeaders", "stringi", "stringr", "survival", "tibble", "tidyr", "XML", "yaml", "zoo"))
install.packages('xtable')
mtcars
as.data.frame(mtcars)
cars <- as.data.frame(mtcars)
View(cars)
cars$href <- paste0("\\href{http://www.google.com}{",cars$mpg,"}")
libary(xtable)
library(xtable)
print(cars, include.rownames=FALSE, sanitize.text.function = function(x){x})
knitr::opts_chunk$set(echo = TRUE)
cars <- as.data.frame(mtcars)
cars$href <- paste0("\\href{http://www.google.com}{",cars$mpg,"}")
carsTable <- xtable(cars, comment=false)
print(cars, include.rownames=FALSE, sanitize.text.function = function(x){x})
library(xtable)
knitr::opts_chunk$set(echo = TRUE)
cars <- as.data.frame(mtcars)
cars$href <- paste0("\\href{http://www.google.com}{",cars$mpg,"}")
carsTable <- xtable(cars, comment=false)
print(carsTable, include.rownames=FALSE, sanitize.text.function = function(x){x})
library(ggplot2)
sessionInfo()
getwd()
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
View(tmp)
load("installed_old.rda")
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages(missing)
update.packages()
library(ggplot2)
sessionInfo()
install.packages(c("extrafont", "extrafontdb"))
library(extrafont)
font_import()
font()
fonts()
library(shiny)
runExample("01_hello")
runExample("02_text") # tables and data frames
runExample("04_mpg") # global variables
runExample("06_tabsets") # tabbed panels
runExample("08_html") # Shiny app built from HTML
runExample("10_download") # file download wizard
runExample("11_timer") # an automated timer
data("iris")
irid
iris
View(iris)
runApp('Desktop/Shiny Development - Part I/Example_1')
iris3
iris2
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
presidents
mtcars
cars
quakes
BOD
ChickWeight
co2
crimtab
faithful
freeny
HairEyeColor
iris3
JohnsonJohnson
LakeHuron
occupationalStatus
Orange
PlanthGrowth
PlantGrowth
pressure
quakes
trees
women
WWWusage
WorldPhones
warpbreaks
volcano
USPersonalExpenditure
USAccDeaths
UKgas
UCBAdmissions
Titanic
mtcars
runApp('Desktop/Shiny Development - Part I/Example_1')
install.packages("DT")
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
str(mtcars)
runApp('Desktop/Shiny Development - Part I/Example_1')
mtcars
data("mtcars")
mtcars
View(mtcars)
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
dotchart(mtcars$mpg, labels=row.names(mtcars), cex=.7, main="Gas Mileage for Car Models")
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
runApp('Desktop/Shiny Development - Part I/Example_1')
setwd("~/")
setwd("~/Desktop/Shiny Development - Part I/Example_2")
read.csv("./data/Crime Stats.csv")
data <- read.csv("./data/Crime Stats.csv")
View(data)
str(data)
data <- read.csv("./data/Crime Stats.csv", colClasses = c("INC.NUMBER" = "factor", "OCCURRED.ON" = "date", "OCURRED.TO" = "date", "UCR.CRIME.CATEGORY" = "character", "X100.BLOCK.ADDR" = "character", "ZIP" = "factor", "PREMISE.TYPE" = "factor"))
data <- read.csv("./data/Crime Stats.csv", stringsAsFactors = FALSE)
str(data)
crimeData <- read.csv("./data/Crime Stats.csv", stringsAsFactors = FALSE)
crimeData$INC.NUMBER <- as.factor(crimeData$INC.NUMBER)
as.POSIXlt(crimeData$OCCURRED.ON)
as.POSIXlt(crimeData$OCCURRED.ON, format = "%m/%d/%YY %HH:%MM")
as.POSIXlt(crimeData$OCCURRED.ON, format = "%m/%d/%Y %H:%M")
crimeData$OCCURRED.ON <- as.POSIXlt(crimeData$OCCURRED.ON, format = "%m/%d/%Y %H:%M")
crimeData$OCCURRED.TO <- as.POSIXlt(crimeData$OCCURRED.TO, format = "%m/%d/%Y %H:%M")
crimeData$UCR.CRIME.CATEGORY <- as.factor(crimeData$UCR.CRIME.CATEGORY)
crimeData$X100.BLOCK.ADDR <- as.factor(crimeData$X100.BLOCK.ADDR)
crimeData$X100.BLOCK.ADDR <- as.character(crimeData$X100.BLOCK.ADDR)
crimeData$ZIP <- as.factor(crimeData$ZIP)
crimeData$PREMISE.TYPE<- as.character(crimeData$PREMISE.TYPE)
str(crimeData)
save(crimeData, file="./data/CrimeStats.RData")
runApp()
runApp()
load("./data/CrimeStats.RData")
runApp()
runApp()
runApp()
runApp()
file.exists("./data/Crime Stats.csv")
# Get data, if it hasn't already been loaded.
if(file.exists("./data/Crime Stats.csv") == TRUE) {
crimeData <- read.csv("./data/Crime Stats.csv")
} else {
download.file("https://www.phoenix.gov/OpenDataFiles/Crime%20Stats.csv", "./data/")
}
# Get data, if it hasn't already been loaded.
if(file.exists("./data/Crime Stats.csv") == TRUE) {
crimeData <- read.csv("./data/Crime Stats.csv")
} else {
download.file("https://www.phoenix.gov/OpenDataFiles/Crime%20Stats.csv", "./data/")
}
# Get data, if it hasn't already been loaded.
if(file.exists("./data/Crime Stats.csv") == TRUE) {
crimeData <- read.csv("./data/Crime Stats.csv")
} else {
download.file("https://www.phoenix.gov/OpenDataFiles/Crime%20Stats.csv", "./data/Crime Stats.csv")
}
# Get data, if it hasn't already been loaded.
if(file.exists("./data/Crime Stats.csv") == TRUE) {
crimeData <- read.csv("./data/Crime Stats.csv")
} else {
download.file("https://www.phoenix.gov/OpenDataFiles/Crime%20Stats.csv", "./data/Crime Stats.csv")
crimeData <- read.csv("./data/Crime Stats.csv")
}
# Clean and prepare data.
crimeData$INC.NUMBER <- as.factor(crimeData$INC.NUMBER)
crimeData$OCCURRED.ON <- as.POSIXlt(crimeData$OCCURRED.ON, format = "%m/%d/%Y %H:%M")
crimeData$OCCURRED.TO <- as.POSIXlt(crimeData$OCCURRED.TO, format = "%m/%d/%Y %H:%M")
crimeData$UCR.CRIME.CATEGORY <- as.factor(crimeData$UCR.CRIME.CATEGORY)
crimeData$X100.BLOCK.ADDR <- as.character(crimeData$X100.BLOCK.ADDR)
crimeData$ZIP <- as.factor(crimeData$ZIP)
crimeData$PREMISE.TYPE<- as.character(crimeData$PREMISE.TYPE)
# Save the data out to an RData file to preserve data types, etc..
save(crimeData, file="./data/CrimeStats.RData")
runApp()
runApp()
runApp()
# Get data, if it hasn't already been loaded.
if(file.exists("./data/Crime Stats.csv") == TRUE) {
crimeData <- read.csv("./data/Crime Stats.csv")
} else {
download.file("https://www.phoenix.gov/OpenDataFiles/Crime%20Stats.csv", "./data/Crime Stats.csv")
crimeData <- read.csv("./data/Crime Stats.csv")
}
# Clean and prepare data.
crimeData$INC.NUMBER <- as.factor(crimeData$INC.NUMBER)
crimeData$OCCURRED.ON <- as.POSIXlt(crimeData$OCCURRED.ON, format = "%m/%d/%Y %H:%M")
crimeData$OCCURRED.TO <- as.POSIXlt(crimeData$OCCURRED.TO, format = "%m/%d/%Y %H:%M")
crimeData$UCR.CRIME.CATEGORY <- as.factor(crimeData$UCR.CRIME.CATEGORY)
crimeData$X100.BLOCK.ADDR <- as.character(crimeData$X100.BLOCK.ADDR)
crimeData$ZIP <- as.factor(crimeData$ZIP)
crimeData$PREMISE.TYPE<- as.character(crimeData$PREMISE.TYPE)
# Save the data out to an RData file to preserve data types, etc..
save(crimeData, file="./data/CrimeStats.RData")
as.Date(crimeData$OCCURRED.ON)
aggregate(crimeData$INC.NUMBER~as.Date(crimeData$OCCURRED.ON), data=crimeData, FUN = length)
ggolot(aggregate(crimeData$INC.NUMBER~as.Date(crimeData$OCCURRED.ON), data=crimeData, FUN = length))
library(ggplor2)
library(ggplot2)
ggplot(aggregate(crimeData$INC.NUMBER~as.Date(crimeData$OCCURRED.ON), data=crimeData, FUN = length))
ggplot(aggregate(crimeData$INC.NUMBER~as.Date(crimeData$OCCURRED.ON), data=crimeData, FUN = length), aes(x=as.Date(crimeData$OCCURRED.ON), y=crimeData$INC.NUMBER))
ggplot(aggregate(crimeData$INC.NUMBER~as.Date(crimeData$OCCURRED.ON), data=crimeData, FUN = length), aes(x=as.Date(crimeData$OCCURRED.ON)))
ggplot(aggregate(crimeData$INC.NUMBER~as.Date(crimeData$OCCURRED.ON), data=crimeData, FUN = length), ) + geom_line()
ggplot(aggregate(crimeData$INC.NUMBER~as.Date(crimeData$OCCURRED.ON), data=crimeData, FUN = length)) + geom_line()
ggplot(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)) + geom_line()
library(zoo)
ggplot(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)) + geom_line()
ggplot(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length))
aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)
aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,1]
aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,2]
ggplot(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length), aex(x=aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,1], aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,2]))
ggplot(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length), aes(x=aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,1], aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,2]))
ggplot(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length), aes(x=aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,1], aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,2])), geom_bar()
ggplot(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length), aes(x=aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,1], aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,2])) + geom_bar()
ggplot(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length), aes(x=aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,1], aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length)[,2])) + geom_line()
aggregate(crimeData$INC.NUMBER~(crimeData$OCCURRED.ON), data=crimeData, FUN = length)
aggregate(crimeData$INC.NUMBER~year(crimeData$OCCURRED.ON), data=crimeData, FUN = length)
aggregate(crimeData$INC.NUMBER~as.year(crimeData$OCCURRED.ON), data=crimeData, FUN = length)
aggregate(crimeData$INC.NUMBER~year(crimeData$OCCURRED.ON), data=crimeData, FUN = length)
aggregate(crimeData$INC.NUMBER~as.numeric(format(crimeData$OCCURRED.ON), %Y), data=crimeData, FUN = length)
aggregate(crimeData$INC.NUMBER~as.numeric(format(crimeData$OCCURRED.ON), "%Y"), data=crimeData, FUN = length)
aggregate(crimeData$INC.NUMBER~as.numeric(format(crimeData$OCCURRED.ON, "%Y")), data=crimeData, FUN = length)
setNames(aggregate(crimeData$INC.NUMBER~as.numeric(format(crimeData$OCCURRED.ON, "%Y")), data=crimeData, FUN = length), c("Year", "Count"))
# Get data, if it hasn't already been loaded.
if(file.exists("./data/Crime Stats.csv") == TRUE) {
crimeData <- read.csv("./data/Crime Stats.csv")
} else {
download.file("https://www.phoenix.gov/OpenDataFiles/Crime%20Stats.csv", "./data/Crime Stats.csv")
crimeData <- read.csv("./data/Crime Stats.csv")
}
# Clean and prepare data.
crimeData$INC.NUMBER <- as.factor(crimeData$INC.NUMBER)
crimeData$OCCURRED.ON <- as.POSIXlt(crimeData$OCCURRED.ON, format = "%m/%d/%Y %H:%M")
crimeData$OCCURRED.TO <- as.POSIXlt(crimeData$OCCURRED.TO, format = "%m/%d/%Y %H:%M")
crimeData$UCR.CRIME.CATEGORY <- as.factor(crimeData$UCR.CRIME.CATEGORY)
crimeData$X100.BLOCK.ADDR <- as.character(crimeData$X100.BLOCK.ADDR)
crimeData$ZIP <- as.factor(crimeData$ZIP)
crimeData$PREMISE.TYPE<- as.character(crimeData$PREMISE.TYPE)
# Save the data out to an RData file to preserve data types, etc..
save(crimeData, file="./data/CrimeStats.RData")
crimesByMonth <- setNames(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length), c("Month", "Count"))
View(crimesByMonth)
ggplot(crimesByMonth, aes(x=Month, y=Count)) + geom_bar()
ggplot(crimesByMonth, aes(x=as.factor(Month), y=Count)) + geom_bar()
ggplot(crimesByMonth, aes(x=as.factor(Month), y=Count)) + geom_bar(stat = "identity")
ggplot(crimesByMonth, aes(x=Month, y=Count)) + geom_bar(stat = "identity")
ggplot(crimesByMonth, aes(x=as.factor(Month), y=Count)) + geom_bar(stat = "identity")
ggplot(crimesByMonth, aes(x=as.factor(Month), y=Count)) + geom_bar(stat = "identity") + theme_bw()
ggplot(crimesByMonth, aes(x=as.factor(Month), y=Count)) + geom_bar(stat = "identity") + theme_classic()
ggplot(crimesByMonth, aes(x=as.factor(Month), y=Count)) + geom_bar(stat = "identity") + theme_classic() + xlab("Month")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unique(crimeData$UCR.CRIME.CATEGORY)
View(crimeData)
# Density plot
par(mfrow=c(3, 3))
colnames <- dimnames(crimeData)[[4]]
for (i in 2:8) {
d <- density(crime[,i])
plot(d, type="n", main=colnames[i])
polygon(d, col="red", border="gray")
}
# Density plot
par(mfrow=c(3, 3))
colnames <- dimnames(crimeData)[[4]]
for (i in 1:nrow(crimeData)) {
d <- density(crimeData[,i])
plot(d, type="n", main=colnames[i])
polygon(d, col="red", border="gray")
}
# Density plot
par(mfrow=c(3, 3))
colnames <- dimnames(crimeData)[[2]]
for (i in 1:nrow(crimeData)) {
d <- density(crimeData[,i])
plot(d, type="n", main=colnames[i])
polygon(d, col="red", border="gray")
}
runApp()
View(crimeData)
unique(crimeData$ZIP)
unique(crimeData$PREMISE.TYPE
)
aggregate(crimeData$INC.NUMBER~crimeData$PREMISE.TYPE, data=crimeData, FUN = length)
aggregate(crimeData$INC.NUMBER~crimeData$UCR.CRIME.CATEGORY, data=crimeData, FUN = length)
crimesByMonth <- setNames(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON)+crimeData$UCR.CRIME.CATEGORY, data=crimeData, FUN = length), c("Month", "Count"))
View(crimesByMonth)
unique(crimeData$UCR.CRIME.CATEGORY)
list(unique(crimeData$UCR.CRIME.CATEGORY))
as.vector(unique(crimeData$UCR.CRIME.CATEGORY))
as.vector(unique(crimesByMonth$UCR.CRIME.CATEGORY))
View(crimesByMonth)
crimesByMonth <- setNames(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON)+crimeData$UCR.CRIME.CATEGORY, data=crimeData, FUN = length), c("Month", "Category", "Count"))
View(crimesByMonth)
unique(crimesByMonth$Category)
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in as.vector(unique(crimesByMonth$Category))) {
hist(crimesByMonth$Count, breaks = i, main = paste("method is", i, split = ""))
}
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in unique(crimesByMonth$Category)) {
hist(crimesByMonth$Category, breaks = i, main = paste("method is", i, split = ""))
}
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in list(unique(crimesByMonth$Category)){
hist(crimesByMonth$Category, breaks = i, main = paste("method is", i, split = ""))
}
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in list(unique(crimesByMonth$Category)) {
hist(crimesByMonth$Category, breaks = i, main = paste("method is", i, split = ""))
}
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in list(unique(crimesByMonth$Category))) {
hist(crimesByMonth$Category, breaks = i, main = paste("method is", i, split = ""))
}
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in as.vector(unique(crimesByMonth$Category))) {
hist(crimesByMonth$Category, breaks = i, main = paste("method is", i, split = ""))
}
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in as.vector(unique(crimesByMonth$Category))) {
print(i)
#hist(crimesByMonth$Category, breaks = i, main = paste("method is", i, split = ""))
}
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in as.vector(unique(crimesByMonth$Category))) {
#print(i)
hist(crimesByMonth$Count, breaks = i, main = paste("method is", i, split = ""))
}
par(mfrow = c(3, 3))  # 3 rows and 2 columns
for (i in as.vector(unique(crimesByMonth$Category))) {
#print(i)
hist(crimesByMonth$Count, breaks = i, main = paste(i, split = ""))
}
hist(crimesByMonth)
hist(crimesByMonth$Count)
hist(crimesByMonth$Count, breaks = as.vector(unique(crimesByMonth$Category)))
hist(crimesByMonth$Count, breaks = 9)
hist(crimesByMonth$Count, breaks = 1)
hist(crimesByMonth$Count, breaks = 1000)
barplot(crimeData)
barplot(crimesByMonth$Count)
barplot(crimesByMonth)
barplot(crimesByMonth$Count)
crimesByMonth <- setNames(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON), data=crimeData, FUN = length), c("Month", "Count"))
barplot(crimesByMonth$Count)
hist(crimesByMonth$Count)
hist(crimesByMonth$Count)
barplot(crimesByMonth$Count)
barplot(crimesByMonth$Count, main = "Crimes by Month", xlab="Month", ylab="Count")
runApp()
runApp()
runApp()
barplot(crimesByMonth$Count, main = "Crimes by Month", xlab="Month", ylab="Count", cex.names = 0.9)
barplot(crimesByMonth$Count, main = "Crimes by Month", xlab="Month", ylab="Count", cex.names = 1.2)
barplot(crimesByMonth$Count, main = "Crimes by Month", xlab="Month", ylab="Count", cex.names = 0.5)
View(crimesByMonth)
crimesByMonth <- setNames(aggregate(crimeData$INC.NUMBER~as.yearmon(crimeData$OCCURRED.ON)+crimeData$UCR.CRIME.CATEGORY, data=crimeData, FUN = length), c("Month", "Category", "Count"))
barplot(crimesByMonth$Count, main = "Crimes by Month", xlab="Month", ylab="Count")
